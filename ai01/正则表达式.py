"""
常用规则
1.1. ？匹配0或1次前面的分组，上限是1
1.2. * 匹配大于等于0次前面的分组，上限是无限
1.3. + 匹配大于等于1次前面的分组，上限是无限
1.4. {n}匹配n次前面的分组
1.5. {n,}匹配大于等于n次前面的分组
1.6. {,m}匹配小于等于m次前面的分组
1.7. {n,m}匹配大于等于n次，小于等于m次前面的分组
1.8. {n,m}？对前面的分组进行非贪心匹配
1.9. *？对前面的分组进行非贪心匹配
1.10. +？对前面的分组进行非贪心匹配
1.11. ^spam 字符串必须以spam开始
1.12. spam$ 字符串必须以spam结束
1.13. 点号.匹配所有字符，除了换行符\n
1.14. \d匹配数字，\D匹配数字以外的字符
1.15. \w匹配字母，\W匹配字母以外的字符
1.16. \s匹配空格，\S匹配空格以外的字符
1.17. [abc]匹配方括号内的任意字符（例如：a,b,c）
1.18. [^abc]匹配不在方括号内的任意字符
1.19. | 匹配任意一个
"""
"""
正则表达式是一门独立的语言，跟具体的编程语言无关
使用: 简写成 regex 或者 re
"""
import re

print(dir(re))

"""
匹配QQ号
- 必须是数字
- 长度5-13位
- 0不能开头
"""
rex = re.match('^[1-9]\\d{4,12}@qq.com$', '664461395@qq.com')
print(rex, 'rex')
if rex:
    print(True)
else:
    print(False)

"""
校验手机号码
- 必须数字
- 必须11位
- 必须是 130 132 133 134 135 136 137 151 153 155 170 173 189
"""
rexa = re.match('^(130|132|133|134|135|136|137|151|153|155|170|173|189)\\d{8}$', '13781808108')

print(rexa, 'rexa')
if rexa:
    print(True)
else:
    print(False)

"""
正则拆分
ip = 192.168.127.12
"""
ip = '192.168.127.12'
st = re.split('\\.', ip)
print(st)

"""
数据脱敏
mobile = 13177562345
des_mobile = 131****2345
"""
mobile = '13177562345'

desa = re.sub('(\\d{3})(?:\\d*)(\\d{4})', '\\1****\\2', mobile)
print(desa)